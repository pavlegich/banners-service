// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pavlegich/banners-service/internal/domains/banner (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	banner "github.com/pavlegich/banners-service/internal/domains/banner"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *MockRepository) CreateBanner(arg0 context.Context, arg1 *banner.Banner) (*banner.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", arg0, arg1)
	ret0, _ := ret[0].(*banner.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockRepositoryMockRecorder) CreateBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockRepository)(nil).CreateBanner), arg0, arg1)
}

// DeleteBannerByID mocks base method.
func (m *MockRepository) DeleteBannerByID(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBannerByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBannerByID indicates an expected call of DeleteBannerByID.
func (mr *MockRepositoryMockRecorder) DeleteBannerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBannerByID", reflect.TypeOf((*MockRepository)(nil).DeleteBannerByID), arg0, arg1)
}

// GetBannerByFilter mocks base method.
func (m *MockRepository) GetBannerByFilter(arg0 context.Context, arg1, arg2 int) (*banner.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannerByFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*banner.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannerByFilter indicates an expected call of GetBannerByFilter.
func (mr *MockRepositoryMockRecorder) GetBannerByFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannerByFilter", reflect.TypeOf((*MockRepository)(nil).GetBannerByFilter), arg0, arg1, arg2)
}

// GetBannersByFilter mocks base method.
func (m *MockRepository) GetBannersByFilter(arg0 context.Context, arg1, arg2, arg3, arg4 int) ([]*banner.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannersByFilter", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*banner.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannersByFilter indicates an expected call of GetBannersByFilter.
func (mr *MockRepositoryMockRecorder) GetBannersByFilter(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannersByFilter", reflect.TypeOf((*MockRepository)(nil).GetBannersByFilter), arg0, arg1, arg2, arg3, arg4)
}

// UpdateBanner mocks base method.
func (m *MockRepository) UpdateBanner(arg0 context.Context, arg1 *banner.Banner) (*banner.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", arg0, arg1)
	ret0, _ := ret[0].(*banner.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBanner indicates an expected call of UpdateBanner.
func (mr *MockRepositoryMockRecorder) UpdateBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockRepository)(nil).UpdateBanner), arg0, arg1)
}
