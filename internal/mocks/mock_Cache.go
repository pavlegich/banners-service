// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pavlegich/banners-service/internal/domains/banner (interfaces: Cache)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	banner "github.com/pavlegich/banners-service/internal/domains/banner"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *MockCache) CreateBanner(arg0 context.Context, arg1 *banner.Banner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockCacheMockRecorder) CreateBanner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockCache)(nil).CreateBanner), arg0, arg1)
}

// DeleteBanner mocks base method.
func (m *MockCache) DeleteBanner(arg0 context.Context, arg1, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockCacheMockRecorder) DeleteBanner(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockCache)(nil).DeleteBanner), arg0, arg1, arg2, arg3)
}

// GarbageCollect mocks base method.
func (m *MockCache) GarbageCollect(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GarbageCollect", arg0)
}

// GarbageCollect indicates an expected call of GarbageCollect.
func (mr *MockCacheMockRecorder) GarbageCollect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollect", reflect.TypeOf((*MockCache)(nil).GarbageCollect), arg0)
}

// GetBannerByFilter mocks base method.
func (m *MockCache) GetBannerByFilter(arg0 context.Context, arg1, arg2 int) (*banner.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannerByFilter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*banner.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannerByFilter indicates an expected call of GetBannerByFilter.
func (mr *MockCacheMockRecorder) GetBannerByFilter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannerByFilter", reflect.TypeOf((*MockCache)(nil).GetBannerByFilter), arg0, arg1, arg2)
}
